{
  "name": "C++",
  "description": "A general-purpose programming language created as an extension of the C programming language.",
  "lessons": [
    {
      "title": "Basic Syntax",
      "description": "Learn about C++ basic syntax and structure",
      "content": [
        "#include <iostream>",
        "using namespace std;",
        "",
        "int main() {",
        "    cout << \"Hello, World!\" << endl;",
        "    return 0;",
        "}"
      ]
    },
    {
      "title": "Variables",
      "description": "Practice declaring and initializing variables",
      "content": [
        "int number = 42;",
        "double pi = 3.14159;",
        "bool isCppFun = true;",
        "char grade = 'A';",
        "string message = \"Welcome to C++ programming!\";"
      ]
    },
    {
      "title": "Functions",
      "description": "Practice declaring and calling functions",
      "content": [
        "int add(int a, int b);",
        "int sum = add(5, 3);",
        "cout << \"Sum: \" << sum << endl;"
      ]
    },
    {
      "title": "Classes",
      "description": "Learn about C++ classes",
      "content": [
        "class Person {",
        "    private:",
        "        string name;",
        "        int age;",
        "    public:",
        "        Person(string personName, int personAge) {",
        "            name = personName;",
        "            age = personAge;",
        "        }",
        "        void introduce() {",
        "            cout << \"Hello, my name is \" << name << \" and I am \" << age << \" years old.\" << endl;",
        "        }",
        "};"
      ]
    },
    {
      "title": "Control Flow",
      "description": "Practice typing C++ control flow statements",
      "content": [
        "if (true) {",
        "    cout << \"It's true!\" << endl;",
        "}"
      ]
    },
    {
      "title": "Loops",
      "description": "Practice typing C++ loops",
      "content": [
        "for (int i = 1; i <= 5; i++) {",
        "    cout << \"Count: \" << i << endl;",
        "}"
      ]
    },
    {
      "title": "Arrays",
      "description": "Learn about C++ arrays",
      "content": [
        "int numbers[] = {1, 2, 3, 4, 5};"
      ]
    },
    {
      "title": "Pointers",
      "description": "Learn about C++ pointers",
      "content": [
        "int* pNumber = &number;"
      ]
    },
    {
      "title": "Structures",
      "description": "Learn about C++ structures",
      "content": [
        "struct Person {",
        "    string name;",
        "    int age;",
        "};"
      ]
    },
    {
      "title": "Templates",
      "description": "Learn about C++ templates",
      "content": [
        "template <typename T>",
        "T max(T a, T b) {",
        "    return (a > b) ? a : b;",
        "}"
      ]
    },
    {
      "title": "Exception Handling",
      "description": "Learn about C++ exception handling",
      "content": [
        "try {",
        "    int x = 5 / 0;",
        "} catch (const std::exception& e) {",
        "    std::cout << \"Exception: \" << e.what() << std::endl;",
        "}"
      ]
    },
    {
      "title": "File Input/Output",
      "description": "Learn about C++ file input/output",
      "content": [
        "ifstream file(\"example.txt\");",
        "string line;",
        "while (getline(file, line)) {",
        "    cout << line << endl;",
        "}"
      ]
    },
    {
      "title": "Maps",
      "description": "Learn about C++ maps",
      "content": [
        "map<string, int> ages;",
        "ages[\"John\"] = 30;",
        "ages[\"Jane\"] = 28;"
      ]
    },
    {
      "title": "Sets",
      "description": "Learn about C++ sets",
      "content": [
        "set<string> names;",
        "names.insert(\"John\");",
        "names.insert(\"Jane\");"
      ]
    },
    {
      "title": "Lambda Expressions",
      "description": "Learn about C++ lambda expressions",
      "content": [
        "auto add = [](int a, int b) { return a + b; };",
        "int sum = add(5, 3);",
        "cout << \"Sum: \" << sum << endl;"
      ]
    },
    {
      "title": "Smart Pointers",
      "description": "Learn about C++ smart pointers",
      "content": [
        "unique_ptr<int> ptr(new int(5));",
        "cout << \"Value: \" << *ptr << endl;"
      ]
    },
    {
      "title": "Move Semantics",
      "description": "Learn about C++ move semantics",
      "content": [
        "string s1 = \"Hello\";",
        "string s2 = std::move(s1);",
        "cout << \"s2: \" << s2 << endl;"
      ]
    },
    {
      "title": "Rvalue References",
      "description": "Learn about C++ rvalue references",
      "content": [
        "int foo(int&& x) { return x * 2; };",
        "int result = foo(5);",
        "cout << \"Result: \" << result << endl;"
      ]
    },
    {
      "title": "Variadic Templates",
      "description": "Learn about C++ variadic templates",
      "content": [
        "template<typename... Ts>",
        "void print(Ts... args) {",
        "    (std::cout << ... << args) << std::endl;",
        "}",
        "print(1, 2, 3, 4, 5);"
      ]
    },
    {
      "title": "auto",
      "description": "Learn about the auto keyword",
      "content": [
        "auto name = \"John\";",
        "auto age = 30;",
        "auto numbers = {1, 2, 3, 4, 5};"
      ]
    }
  ]
}