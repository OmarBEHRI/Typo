{
  "name": "C#",
  "description": "A modern, object-oriented programming language developed by Microsoft.",
  "lessons": [
    {
      "title": "Hello World",
      "description": "Print Hello World to the console",
      "content": [
        "using System;",
        "Console.WriteLine(\"Hello World\");"
      ]
    },
    {
      "title": "Variables",
      "description": "Declare and assign values to variables",
      "content": [
        "int number = 42;",
        "double pi = 3.14159;",
        "bool isCSharpFun = true;",
        "char grade = 'A';",
        "string message = \"Welcome to C# programming!\";"
      ]
    },
    {
      "title": "Basic Operations",
      "description": "Perform basic arithmetic operations",
      "content": [
        "int x = 5;",
        "int y = 2;",
        "int result = x + y;",
        "Console.WriteLine($\"The result is: {result}\");"
      ]
    },
    {
      "title": "Control Flow",
      "description": "Learn about if-else statements and switch statements",
      "content": [
        "int score = 85;",
        "string grade;",
        "",
        "if (score >= 90) { grade = \"A\"; }",
        "else if (score >= 80) { grade = \"B\"; }",
        "else if (score >= 70) { grade = \"C\"; }",
        "else if (score >= 60) { grade = \"D\"; }",
        "else { grade = \"F\"; }",
        "",
        "Console.WriteLine($\"The grade is: {grade}\");"
      ]
    },
    {
      "title": "Loops",
      "description": "Learn about for, while and do-while loops",
      "content": [
        "for (int i = 0; i < 5; i++)",
        "{",
        "    Console.WriteLine($\"Count: {i}\");",
        "}",
        "",
        "int countdown = 5;",
        "while (countdown > 0)",
        "{",
        "    Console.WriteLine($\"Countdown: {countdown}\");",
        "    countdown--;",
        "}",
        "",
        "int num = 1;",
        "do",
        "{",
        "    Console.WriteLine($\"Number: {num}\");",
        "    num++;",
        "} while (num <= 3);"
      ]
    },
    {
      "title": "Functions",
      "description": "Learn about functions and methods",
      "content": [
        "void PrintMessage(string message)",
        "{",
        "    Console.WriteLine(message);",
        "}",
        "",
        "PrintMessage(\"Hello, World!\");"
      ]
    },
    {
      "title": "Arrays and Lists",
      "description": "Learn about arrays and lists",
      "content": [
        "int[] numbers = { 1, 2, 3 };",
        "List<string> fruits = new List<string>();",
        "fruits.Add(\"Apple\");",
        "fruits.Add(\"Banana\");",
        "fruits.Add(\"Cherry\");"
      ]
    },
    {
      "title": "Classes and Objects",
      "description": "Learn about classes and objects",
      "content": [
        "public class Person",
        "{",
        "    public string Name { get; set; }",
        "    public int Age { get; set; }",
        "    ",
        "    public void Introduce()",
        "    {",
        "        Console.WriteLine($\"Hello, my name is {Name} and I am {Age} years old.\");",
        "    }",
        "}"
      ]
    },
    {
      "title": "Inheritance",
      "description": "Learn about inheritance",
      "content": [
        "public class Animal",
        "{",
        "    public virtual void MakeSound()",
        "    {",
        "        Console.WriteLine(\"Animal makes a sound\");",
        "    }",
        "}",
        "",
        "public class Dog : Animal",
        "{",
        "    public override void MakeSound()",
        "    {",
        "        Console.WriteLine(\"Dog barks\");",
        "    }",
        "}"
      ]
    },
    {
      "title": "Polymorphism",
      "description": "Learn about polymorphism",
      "content": [
        "public class Animal",
        "{",
        "    public virtual void MakeSound()",
        "    {",
        "        Console.WriteLine(\"Animal makes a sound\");",
        "    }",
        "}",
        "",
        "public class Dog : Animal",
        "{",
        "    public override void MakeSound()",
        "    {",
        "        Console.WriteLine(\"Dog barks\");",
        "    }",
        "}",
        "",
        "Animal animal = new Dog();",
        "animal.MakeSound();"
      ]
    },
    {
      "title": "Exception Handling",
      "description": "Learn about exception handling",
      "content": [
        "try",
        "{",
        "    int x = 5;",
        "    int y = 0;",
        "    int result = x / y;",
        "}",
        "catch (DivideByZeroException ex)",
        "{",
        "    Console.WriteLine(\"Cannot divide by zero!\");",
        "}"
      ]
    },
    {
      "title": "File Input and Output",
      "description": "Learn about file input and output",
      "content": [
        "string path = @\"C:\\example.txt\";",
        "string content = \"Hello, World!\";",
        "File.WriteAllText(path, content);",
        "",
        "string readContent = File.ReadAllText(path);",
        "Console.WriteLine(readContent);"
      ]
    },
    {
      "title": "Generics",
      "description": "Learn about generics",
      "content": [
        "public class Container<T>",
        "{",
        "    public T Value { get; set; }",
        "}",
        "",
        "Container<int> intContainer = new Container<int>();",
        "intContainer.Value = 42;",
        "",
        "Container<string> stringContainer = new Container<string>();",
        "stringContainer.Value = \"Hello, World!\";"
      ]
    },
    {
      "title": "Lambda Expressions",
      "description": "Learn about lambda expressions",
      "content": [
        "Func<int, int, int> add = (x, y) => x + y;",
        "int result = add(5, 2);",
        "Console.WriteLine($\"The result is: {result}\");"
      ]
    },
    {
      "title": "Extension Methods",
      "description": "Learn about extension methods",
      "content": [
        "public static class MyExtensions",
        "{",
        "    public static int WordCount(this string str)",
        "    {",
        "        return str.Split(new char[] { ' ', '\n' }, StringSplitOptions.RemoveEmptyEntries).Length;",
        "    }",
        "}",
        "",
        "string text = \"Hello, World!\";",
        "int wordCount = text.WordCount();",
        "Console.WriteLine($\"The word count is: {wordCount}\");"
      ]
    },
    {
      "title": "Async/Await",
      "description": "Learn about async/await",
      "content": [
        "public async Task MyMethod()",
        "{",
        "    await Task.Delay(1000);",
        "    Console.WriteLine(\"Hello, World!\");",
        "}"
      ]
    },
    {
      "title": "Covariant Return Types",
      "description": "Learn about covariant return types",
      "content": [
        "public class Animal",
        "{",
        "    public virtual Animal CreateAnimal()",
        "    {",
        "        return new Animal();",
        "    }",
        "}",
        "",
        "public class Dog : Animal",
        "{",
        "    public override Dog CreateAnimal()",
        "    {",
        "        return new Dog();",
        "    }",
        "}"
      ]
    },
    {
      "title": "Tuples",
      "description": "Learn about tuples",
      "content": [
        "var myTuple = (1, 2, 3);",
        "Console.WriteLine(myTuple.Item1);",
        "Console.WriteLine(myTuple.Item2);",
        "Console.WriteLine(myTuple.Item3);"
      ]
    },
    {
      "title": "Records",
      "description": "Learn about records",
      "content": [
        "public record Person(string Name, int Age);",
        "",
        "Person person = new Person(\"John\", 30);",
        "Console.WriteLine(person.Name);",
        "Console.WriteLine(person.Age);"
      ]
    },
    {
      "title": "Pattern Matching",
      "description": "Learn about pattern matching",
      "content": [
        "object obj = 42;",
        "if (obj is int number)",
        "{",
        "    Console.WriteLine(number);",
        "}"
      ]
    },
    {
      "title": "Using Statement",
      "description": "Learn about the using statement",
      "content": [
        "using System.IO;",
        "",
        "using (var stream = new FileStream(\"example.txt\", FileMode.Open))",
        "{",
        "    // Do something with the stream",
        "}"
      ]
    },
    {
      "title": "Nullable Types",
      "description": "Learn about nullable types",
      "content": [
        "int? number = 42;",
        "if (number.HasValue)",
        "{",
        "    Console.WriteLine(number.Value);",
        "}"
      ]
    },
    {
      "title": "Ref and Out Parameters",
      "description": "Learn about ref and out parameters",
      "content": [
        "public static void MyMethod(out int x, ref int y)",
        "{",
        "    x = 42;",
        "    y = 13;",
        "}",
        "",
        "int x, y;",
        "MyMethod(out x, ref y);",
        "Console.WriteLine(x);",
        "Console.WriteLine(y);"
      ]
    }
  ]
}