{
  "name": "Go",
  "description": "A statically typed, compiled programming language designed at Google.",
  "lessons": [
    {
      "title": "Variables",
      "description": "Learn how to declare and use variables in Go",
      "content": [
        "var name string = \"John\"",
        "var age int = 30",
        "var isGoFun bool = true"
      ]
    },
    {
      "title": "Basic Types",
      "description": "Learn about Go basic types",
      "content": [
        "var number int = 42",
        "var pi float64 = 3.14159",
        "var letter rune = 'A'",
        "var message string = \"Welcome to Go programming!\""
      ]
    },
    {
      "title": "Constant",
      "description": "Learn about Go constants",
      "content": [
        "const MaxValue = 1000"
      ]
    },
    {
      "title": "Functions",
      "description": "Learn how to declare and use functions in Go",
      "content": [
        "func add(a, b int) int {",
        "    return a + b",
        "}"
      ]
    },
    {
      "title": "Functions with Multiple Return Values",
      "description": "Learn how to declare and use functions with multiple return values in Go",
      "content": [
        "func divide(a, b float64) (float64, error) {",
        "    if b == 0 {",
        "        return 0, fmt.Errorf(\"cannot divide by zero\")",
        "    }",
        "    return a / b, nil",
        "}"
      ]
    },
    {
      "title": "Structs",
      "description": "Learn how to declare and use structs in Go",
      "content": [
        "type Person struct {",
        "    Name string",
        "    Age  int",
        "}"
      ]
    },
    {
      "title": "Methods",
      "description": "Learn how to declare and use methods in Go",
      "content": [
        "func (p Person) Introduce() {",
        "    fmt.Printf(\"Hello, my name is %s and I am %d years old.\\n\", p.Name, p.Age)",
        "}"
      ]
    },
    {
      "title": "Control Flow - If",
      "description": "Learn how to use if statements in Go",
      "content": [
        "if score >= 90 {",
        "    fmt.Println(\"Grade: A\")",
        "}"
      ]
    },
    {
      "title": "Control Flow - Switch",
      "description": "Learn how to use switch statements in Go",
      "content": [
        "switch day {",
        "case 1:",
        "    fmt.Println(\"Monday\")",
        "case 2:",
        "    fmt.Println(\"Tuesday\")",
        "default:",
        "    fmt.Println(\"Invalid day\")",
        "}"
      ]
    },
    {
      "title": "Control Flow - For",
      "description": "Learn how to use for loops in Go",
      "content": [
        "for i := 1; i <= 5; i++ {",
        "    fmt.Println(\"Count:\", i)",
        "}"
      ]
    },
    {
      "title": "Control Flow - Range",
      "description": "Learn how to use range in Go",
      "content": [
        "numbers := []int{1, 2, 3, 4, 5}",
        "for _, num := range numbers {",
        "    fmt.Println(\"Number:\", num)",
        "}"
      ]
    },
    {
      "title": "Error Handling",
      "description": "Learn how to handle errors in Go",
      "content": [
        "if err != nil {",
        "    fmt.Println(\"Error:\", err)",
        "}"
      ]
    },
    {
      "title": "Pointers",
      "description": "Learn how to use pointers in Go",
      "content": [
        "ptr := &number",
        "fmt.Println(*ptr)"
      ]
    },
    {
      "title": "Arrays",
      "description": "Learn how to use arrays in Go",
      "content": [
        "var numbers [5]int",
        "for i := 0; i < len(numbers); i++ {",
        "    numbers[i] = i * i",
        "}",
        "fmt.Println(numbers)"
      ]
    },
    {
      "title": "Slices",
      "description": "Learn how to use slices in Go",
      "content": [
        "numbers := make([]int, 5)",
        "for i := range numbers {",
        "    numbers[i] = i * i",
        "}",
        "fmt.Println(numbers)"
      ]
    },
    {
      "title": "Maps",
      "description": "Learn how to use maps in Go",
      "content": [
        "fruits := make(map[string]int)",
        "fruits[\"apple\"] = 2",
        "fruits[\"banana\"] = 3",
        "fmt.Println(fruits)"
      ]
    },
    {
      "title": "Closures",
      "description": "Learn how to use closures in Go",
      "content": [
        "add := func(a, b int) int {",
        "    return a + b",
        "}",
        "fmt.Println(add(2, 3))"
      ]
    },
    {
      "title": "Concurrency",
      "description": "Learn how to use concurrency in Go",
      "content": [
        "go func() {",
        "    fmt.Println(\"Hello, World!\")",
        "    time.Sleep(2 * time.Second)",
        "    fmt.Println(\"Goodbye, World!\")",
        "    }()"
      ]
    },
    {
      "title": "Channels",
      "description": "Learn how to use channels in Go",
      "content": [
        "ch := make(chan string)",
        "go func() {",
        "    ch <- \"Hello, World!\"",
        "    time.Sleep(2 * time.Second)",
        "    ch <- \"Goodbye, World!\"",
        "    close(ch)",
        "    }()",
        "for msg := range ch {",
        "    fmt.Println(msg)",
        "}"
      ]
    }
  ]
}