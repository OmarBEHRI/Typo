{
  "name": "Go",
  "description": "A statically typed, compiled programming language designed at Google.",
  "lessons": [
    {
      "title": "Basic Syntax",
      "description": "Learn about Go basic syntax and structure",
      "content": [
        "package main",
        "",
        "import (",
        "    \"fmt\"",
        ")",
        "",
        "func main() {",
        "    // Output to console",
        "    fmt.Println(\"Hello, World!\")",
        "    ",
        "    // Variables",
        "    var number int = 42",
        "    var pi float64 = 3.14159",
        "    var isGoFun bool = true",
        "    var letter rune = 'A'",
        "    var message string = \"Welcome to Go programming!\"",
        "    ",
        "    // Short variable declaration",
        "    shortNumber := 100",
        "    ",
        "    fmt.Println(message)",
        "    fmt.Println(\"The value of number is:\", number)",
        "    fmt.Println(\"The value of shortNumber is:\", shortNumber)",
        "    ",
        "    // Constants",
        "    const MaxValue = 1000",
        "    fmt.Println(\"The maximum value is:\", MaxValue)",
        "}"
      ]
    },
    {
      "title": "Functions and Structs",
      "description": "Practice typing Go functions and structs",
      "content": [
        "package main",
        "",
        "import (",
        "    \"fmt\"",
        ")",
        "",
        "// Function with parameters and return value",
        "func add(a, b int) int {",
        "    return a + b",
        "}",
        "",
        "// Function with multiple return values",
        "func divide(a, b float64) (float64, error) {",
        "    if b == 0 {",
        "        return 0, fmt.Errorf(\"cannot divide by zero\")",
        "    }",
        "    return a / b, nil",
        "}",
        "",
        "// Struct definition",
        "type Person struct {",
        "    Name string",
        "    Age  int",
        "}",
        "",
        "// Method for Person struct",
        "func (p Person) Introduce() {",
        "    fmt.Printf(\"Hello, my name is %s and I am %d years old.\\n\", p.Name, p.Age)",
        "}",
        "",
        "// Method that modifies the struct (pointer receiver)",
        "func (p *Person) Birthday() {",
        "    p.Age++",
        "}",
        "",
        "func main() {",
        "    // Function calls",
        "    sum := add(5, 3)",
        "    fmt.Println(\"Sum:\", sum)",
        "    ",
        "    result, err := divide(10, 2)",
        "    if err != nil {",
        "        fmt.Println(\"Error:\", err)",
        "    } else {",
        "        fmt.Println(\"Result of division:\", result)",
        "    }",
        "    ",
        "    // Creating and using structs",
        "    person1 := Person{Name: \"John\", Age: 30}",
        "    person1.Introduce()",
        "    ",
        "    person2 := Person{\"Alice\", 25}",
        "    person2.Birthday()",
        "    person2.Introduce()",
        "}"
      ]
    },
    {
      "title": "Control Flow",
      "description": "Practice typing Go control flow statements",
      "content": [
        "package main",
        "",
        "import (",
        "    \"fmt\"",
        ")",
        "",
        "func main() {",
        "    // If-else statement",
        "    score := 85",
        "    ",
        "    if score >= 90 {",
        "        fmt.Println(\"Grade: A\")",
        "    } else if score >= 80 {",
        "        fmt.Println(\"Grade: B\")",
        "    } else if score >= 70 {",
        "        fmt.Println(\"Grade: C\")",
        "    } else if score >= 60 {",
        "        fmt.Println(\"Grade: D\")",
        "    } else {",
        "        fmt.Println(\"Grade: F\")",
        "    }",
        "    ",
        "    // If with a short statement",
        "    if num := 9; num < 10 {",
        "        fmt.Println(num, \"is less than 10\")",
        "    } else {",
        "        fmt.Println(num, \"is greater than or equal to 10\")",
        "    }",
        "    ",
        "    // Switch statement",
        "    day := 3",
        "    ",
        "    switch day {",
        "    case 1:",
        "        fmt.Println(\"Monday\")",
        "    case 2:",
        "        fmt.Println(\"Tuesday\")",
        "    case 3:",
        "        fmt.Println(\"Wednesday\")",
        "    case 4:",
        "        fmt.Println(\"Thursday\")",
        "    case 5:",
        "        fmt.Println(\"Friday\")",
        "    case 6:",
        "        fmt.Println(\"Saturday\")",
        "    case 7:",
        "        fmt.Println(\"Sunday\")",
        "    default:",
        "        fmt.Println(\"Invalid day\")",
        "    }",
        "    ",
        "    // Switch with no condition (like if-else chain)",
        "    t := 15",
        "    switch {",
        "    case t < 0:",
        "        fmt.Println(\"Negative number\")",
        "    case t > 0 && t < 10:",
        "        fmt.Println(\"Single digit positive number\")",
        "    default:",
        "        fmt.Println(\"Multiple digit positive number\")",
        "    }",
        "    ",
        "    // For loop (standard)",
        "    fmt.Println(\"Counting from 1 to 5:\")",
        "    for i := 1; i <= 5; i++ {",
        "        fmt.Println(\"Count:\", i)",
        "    }",
        "    ",
        "    // For loop (like while)",
        "    fmt.Println(\"Countdown from 5 to 1:\")",
        "    countdown := 5",
        "    for countdown > 0 {",
        "        fmt.Println(\"Countdown:\", countdown)",
        "        countdown--",
        "    }",
        "    ",
        "    // For loop (infinite with break)",
        "    fmt.Println(\"Break example:\")",
        "    sum := 0",
        "    for {",
        "        sum++",
        "        if sum > 3 {",
        "            break",
        "        }",
        "        fmt.Println(\"Sum:\", sum)",
        "    }",
        "}"
      ]
    }
  ]
}