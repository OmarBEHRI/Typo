{
  "name": "Python",
  "description": "A high-level, interpreted programming language known for its readability and versatility.",
  "lessons": [
    {
      "title": "Basic Syntax",
      "description": "Learn about Python basic syntax and structure",
      "content": [
        "# Output to console",
        "print(\"Hello, World!\")",
        "",
        "# Variables",
        "number = 42",
        "pi = 3.14159",
        "is_python_fun = True",
        "letter = 'A'",
        "message = \"Welcome to Python programming!\"",
        "",
        "print(message)",
        "print(f\"The value of number is: {number}\")",
        "",
        "# Input from console",
        "user_input = input(\"Please enter a number: \")",
        "print(f\"You entered: {user_input}\")",
        "",
        "# Constants (by convention)",
        "MAX_VALUE = 1000",
        "print(f\"The maximum value is: {MAX_VALUE}\")"
      ]
    },
    {
      "title": "Functions and Modules",
      "description": "Practice typing Python functions and modules",
      "content": [
        "# Function definition",
        "def add(a, b):",
        "    return a + b",
        "",
        "# Function with default parameters",
        "def greet(name, message=\"Hello\"):",
        "    return f\"{message}, {name}!\"",
        "",
        "# Function with variable arguments",
        "def sum_all(*args):",
        "    return sum(args)",
        "",
        "# Lambda function",
        "multiply = lambda x, y: x * y",
        "",
        "# Using functions",
        "result = add(5, 3)",
        "print(f\"Sum: {result}\")",
        "",
        "message = greet(\"Alice\")",
        "print(message)",
        "",
        "total = sum_all(1, 2, 3, 4, 5)",
        "print(f\"Total: {total}\")",
        "",
        "product = multiply(4, 5)",
        "print(f\"Product: {product}\")"
      ]
    },
    {
      "title": "Data Structures - Lists and Tuples",
      "description": "Practice typing Python lists and tuples, essential for competitive programming",
      "content": [
        "# Lists",
        "numbers = [1, 2, 3, 4, 5]",
        "fruits = [\"apple\", \"banana\", \"cherry\"]",
        "",
        "# Accessing elements",
        "print(numbers[0])  # First element",
        "print(fruits[-1])  # Last element",
        "",
        "# Slicing",
        "print(numbers[1:3])  # Elements from index 1 to 2",
        "",
        "# List methods",
        "numbers.append(6)  # Add element",
        "numbers.insert(0, 0)  # Insert at position",
        "numbers.remove(3)  # Remove element",
        "popped = numbers.pop()  # Remove and return last element",
        "print(f\"Popped: {popped}, List: {numbers}\")",
        "",
        "# List comprehension",
        "squares = [x**2 for x in range(1, 6)]",
        "print(f\"Squares: {squares}\")",
        "",
        "# Tuples (immutable)",
        "point = (10, 20)",
        "rgb = (255, 0, 0)",
        "",
        "# Tuple unpacking",
        "x, y = point",
        "print(f\"X: {x}, Y: {y}\")"
      ]
    },
    {
      "title": "Control Flow",
      "description": "Practice typing Python control flow statements",
      "content": [
        "# If-else statement",
        "score = 85",
        "",
        "if score >= 90:",
        "    print(\"Grade: A\")",
        "elif score >= 80:",
        "    print(\"Grade: B\")",
        "elif score >= 70:",
        "    print(\"Grade: C\")",
        "elif score >= 60:",
        "    print(\"Grade: D\")",
        "else:",
        "    print(\"Grade: F\")",
        "",
        "# Ternary operator",
        "message = \"Pass\" if score >= 60 else \"Fail\"",
        "print(message)",
        "",
        "# For loop",
        "print(\"Counting from 1 to 5:\")",
        "for i in range(1, 6):",
        "    print(f\"Count: {i}\")",
        "",
        "# For loop with enumerate",
        "fruits = [\"apple\", \"banana\", \"cherry\"]",
        "for index, fruit in enumerate(fruits):",
        "    print(f\"Index {index}: {fruit}\")",
        "",
        "# While loop",
        "print(\"Countdown from 5 to 1:\")",
        "countdown = 5",
        "while countdown > 0:",
        "    print(f\"Countdown: {countdown}\")",
        "    countdown -= 1",
        "",
        "# Break and continue",
        "for i in range(10):",
        "    if i == 3:",
        "        continue  # Skip 3",
        "    if i == 7:",
        "        break  # Stop at 7",
        "    print(i)"
      ]
    },
    {
      "title": "Dictionaries and Sets",
      "description": "Practice typing Python dictionaries and sets, crucial for efficient lookups in competitive programming",
      "content": [
        "# Dictionary",
        "person = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}",
        "",
        "# Accessing values",
        "print(person[\"name\"])",
        "print(person.get(\"age\"))",
        "",
        "# Adding/updating entries",
        "person[\"email\"] = \"john@example.com\"",
        "person[\"age\"] = 31",
        "",
        "# Dictionary methods",
        "keys = person.keys()",
        "values = person.values()",
        "items = person.items()",
        "",
        "# Dictionary comprehension",
        "squares = {x: x**2 for x in range(1, 6)}",
        "print(squares)",
        "",
        "# Sets",
        "fruits = {\"apple\", \"banana\", \"cherry\"}",
        "vegetables = {\"carrot\", \"lettuce\", \"apple\"}",
        "",
        "# Set operations",
        "union = fruits | vegetables  # Union",
        "intersection = fruits & vegetables  # Intersection",
        "difference = fruits - vegetables  # Difference",
        "",
        "print(f\"Union: {union}\")",
        "print(f\"Intersection: {intersection}\")",
        "print(f\"Difference: {difference}\")"
      ]
    },
    {
      "title": "Object-Oriented Programming",
      "description": "Learn about Python classes and objects",
      "content": [
        "# Class definition",
        "class Person:",
        "    def __init__(self, name, age):",
        "        self.name = name",
        "        self.age = age",
        "",
        "    def greet(self):",
        "        return f\"Hello, my name is {self.name}\"",
        "",
        "# Creating objects",
        "person1 = Person(\"Alice\", 25)",
        "person2 = Person(\"Bob\", 30)",
        "",
        "# Accessing attributes",
        "print(person1.name)",
        "print(person2.age)",
        "",
        "# Calling methods",
        "print(person1.greet())",
        "",
        "# Inheritance",
        "class Student(Person):",
        "    def __init__(self, name, age, student_id):",
        "        super().__init__(name, age)",
        "        self.student_id = student_id",
        "",
        "    def study(self):",
        "        return f\"{self.name} is studying\"",
        "",
        "# Creating student object",
        "student1 = Student(\"Charlie\", 20, \"S12345\")",
        "print(student1.greet())",
        "print(student1.study())",
        "",
        "# Class variables",
        "class Counter:",
        "    count = 0  # Class variable",
        "",
        "    def __init__(self):",
        "        Counter.count += 1",
        "",
        "# Creating multiple counters",
        "c1 = Counter()",
        "c2 = Counter()",
        "print(f\"Total counters: {Counter.count}\")"
      ]
    },
    {
      "title": "Error Handling",
      "description": "Practice typing Python exception handling code",
      "content": [
        "# Basic try-except",
        "try:",
        "    number = int(\"abc\")",
        "except ValueError:",
        "    print(\"Invalid number conversion\")",
        "",
        "# Multiple except blocks",
        "try:",
        "    result = 10 / 0",
        "    numbers = [1, 2, 3]",
        "    value = numbers[10]",
        "except ZeroDivisionError:",
        "    print(\"Cannot divide by zero\")",
        "except IndexError:",
        "    print(\"Index out of range\")",
        "",
        "# Try-except-else-finally",
        "try:",
        "    number = int(\"42\")",
        "except ValueError:",
        "    print(\"Conversion failed\")",
        "else:",
        "    print(f\"Conversion successful: {number}\")",
        "finally:",
        "    print(\"Execution completed\")",
        "",
        "# Raising exceptions",
        "def validate_age(age):",
        "    if age < 0:",
        "        raise ValueError(\"Age cannot be negative\")",
        "    return age",
        "",
        "# Custom exceptions",
        "class CustomError(Exception):",
        "    pass",
        "",
        "try:",
        "    raise CustomError(\"This is a custom error\")",
        "except CustomError as e:",
        "    print(f\"Caught error: {e}\")"
      ]
    },
    {
      "title": "File Operations",
      "description": "Learn to read and write files in Python",
      "content": [
        "# Writing to a file",
        "with open('example.txt', 'w') as file:",
        "    file.write('Hello, World!')",
        "    file.write('\\nThis is a new line')",
        "",
        "# Reading from a file",
        "with open('example.txt', 'r') as file:",
        "    content = file.read()",
        "print(f\"File contents: {content}\")",
        "",
        "# Reading lines from a file",
        "with open('example.txt', 'r') as file:",
        "    lines = file.readlines()",
        "print(f\"Lines: {lines}\")",
        "",
        "# Appending to a file",
        "with open('example.txt', 'a') as file:",
        "    file.write('\\nAppended text')",
        "",
        "# Reading file line by line",
        "with open('example.txt', 'r') as file:",
        "    for line in file:",
        "        print(f\"Line: {line.strip()}\")",
        "",
        "# Checking if file exists",
        "import os",
        "file_exists = os.path.exists('example.txt')",
        "print(f\"File exists: {file_exists}\")",
        "",
        "# Working with CSV files",
        "import csv",
        "with open('data.csv', 'w', newline='') as file:",
        "    writer = csv.writer(file)",
        "    writer.writerow(['Name', 'Age'])",
        "    writer.writerow(['Alice', 25])",
        "",
        "# Reading CSV files",
        "with open('data.csv', 'r') as file:",
        "    reader = csv.reader(file)",
        "    for row in reader:",
        "        print(f\"Row: {row}\")"
      ]
    },
    {
      "title": "Advanced Data Structures - Heaps",
      "description": "Practice using heaps/priority queues for efficient sorting and priority operations",
      "content": [
        "# Importing heapq module",
        "import heapq",
        "",
        "# Creating a min heap",
        "numbers = [3, 1, 4, 1, 5, 9, 2, 6]",
        "heapq.heapify(numbers)",
        "print(f\"Min heap: {numbers}\")",
        "",
        "# Push and pop operations",
        "heapq.heappush(numbers, 0)",
        "smallest = heapq.heappop(numbers)",
        "print(f\"Smallest element: {smallest}\")",
        "",
        "# Push and pop in one operation",
        "next_smallest = heapq.heappushpop(numbers, 7)",
        "print(f\"Next smallest: {next_smallest}\")",
        "",
        "# Get n smallest elements",
        "smallest_three = heapq.nsmallest(3, numbers)",
        "print(f\"Three smallest: {smallest_three}\")",
        "",
        "# Creating a max heap (using negatives)",
        "max_heap = [-n for n in [3, 1, 4, 1, 5, 9, 2, 6]]",
        "heapq.heapify(max_heap)",
        "",
        "# Get largest element",
        "largest = -heapq.heappop(max_heap)",
        "print(f\"Largest element: {largest}\")",
        "",
        "# Priority Queue implementation",
        "class PriorityQueue:",
        "    def __init__(self):",
        "        self._queue = []",
        "",
        "    def push(self, item, priority):",
        "        heapq.heappush(self._queue, (priority, item))",
        "",
        "    def pop(self):",
        "        return heapq.heappop(self._queue)[1]",
        "",
        "# Using Priority Queue",
        "pq = PriorityQueue()",
        "pq.push(\"task1\", 3)",
        "pq.push(\"task2\", 1)",
        "pq.push(\"task3\", 2)",
        "",
        "print(f\"First task: {pq.pop()}\")"
      ]
    },
    {
      "title": "Advanced Data Structures - Deques",
      "description": "Learn about double-ended queues for efficient front and rear operations",
      "content": [
        "# Importing deque",
        "from collections import deque",
        "",
        "# Creating a deque",
        "d = deque([1, 2, 3, 4, 5])",
        "print(f\"Initial deque: {d}\")",
        "",
        "# Adding elements",
        "d.append(6)  # Add to right end",
        "d.appendleft(0)  # Add to left end",
        "print(f\"After adding elements: {d}\")",
        "",
        "# Removing elements",
        "right = d.pop()  # Remove from right end",
        "left = d.popleft()  # Remove from left end",
        "print(f\"Removed right: {right}, left: {left}\")",
        "print(f\"After removing: {d}\")",
        "",
        "# Rotating the deque",
        "d.rotate(1)  # Rotate right by 1",
        "print(f\"After rotating right: {d}\")",
        "d.rotate(-2)  # Rotate left by 2",
        "print(f\"After rotating left: {d}\")",
        "",
        "# Other operations",
        "d.extend([7, 8])  # Extend at right",
        "d.extendleft([9, 10])  # Extend at left",
        "print(f\"After extending: {d}\")",
        "",
        "# Clear the deque",
        "d.clear()",
        "print(f\"After clearing: {d}\")"
      ]
    },
    {
      "title": "Graph Representations",
      "description": "Practice implementing adjacency lists and matrices for graph problems",
      "content": [
        "# Adjacency List representation",
        "graph = {",
        "    'A': ['B', 'C'],",
        "    'B': ['A', 'D', 'E'],",
        "    'C': ['A', 'F'],",
        "    'D': ['B'],",
        "    'E': ['B', 'F'],",
        "    'F': ['C', 'E']",
        "}",
        "",
        "# Print adjacency list",
        "for vertex in graph:",
        "    print(f\"Vertex {vertex} connected to: {graph[vertex]}\")",
        "",
        "# Adjacency Matrix representation",
        "vertices = ['A', 'B', 'C', 'D']",
        "matrix = [",
        "    [0, 1, 1, 0],  # A's connections",
        "    [1, 0, 0, 1],  # B's connections",
        "    [1, 0, 0, 1],  # C's connections",
        "    [0, 1, 1, 0]   # D's connections",
        "]",
        "",
        "# Print adjacency matrix",
        "print(\"Adjacency Matrix:\")",
        "for row in matrix:",
        "    print(row)",
        "",
        "# Check if vertices are connected",
        "def is_connected(matrix, v1, v2):",
        "    return matrix[v1][v2] == 1",
        "",
        "# Add edge to adjacency list",
        "def add_edge(graph, v1, v2):",
        "    if v2 not in graph[v1]:",
        "    graph[v1].append(v2)",
        "    graph[v2].append(v1)",
        "",
        "# Get neighbors from adjacency list",
        "def get_neighbors(graph, vertex):",
        "    return graph[vertex]",
        "",
        "# Print neighbors",
        "vertex = 'A'",
        "neighbors = get_neighbors(graph, vertex)",
        "print(f\"Neighbors of {vertex}: {neighbors}\")"
      ]
    },
    {
      "title": "Dynamic Programming Basics",
      "description": "Learn to implement memoization and tabulation techniques",
      "content": [
        "# Fibonacci with memoization",
        "def fib_memo(n, memo={}):",
        "    if n in memo:",
        "        return memo[n]",
        "    if n <= 1:",
        "        return n",
        "    memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo)",
        "    return memo[n]",
        "",
        "# Using memoized fibonacci",
        "result = fib_memo(10)",
        "print(f\"10th Fibonacci number: {result}\")",
        "",
        "# Fibonacci with tabulation",
        "def fib_tab(n):",
        "    if n <= 1:",
        "        return n",
        "    dp = [0] * (n + 1)",
        "    dp[1] = 1",
        "    for i in range(2, n + 1):",
        "        dp[i] = dp[i-1] + dp[i-2]",
        "    return dp[n]",
        "",
        "# Using tabulation fibonacci",
        "result = fib_tab(10)",
        "print(f\"10th Fibonacci number: {result}\")",
        "",
        "# Coin change problem",
        "def coin_change(coins, amount):",
        "    dp = [float('inf')] * (amount + 1)",
        "    dp[0] = 0",
        "    for i in range(1, amount + 1):",
        "        for coin in coins:",
        "            if coin <= i:",
        "                dp[i] = min(dp[i], dp[i-coin] + 1)",
        "    return dp[amount] if dp[amount] != float('inf') else -1",
        "",
        "# Using coin change",
        "coins = [1, 2, 5]",
        "amount = 11",
        "result = coin_change(coins, amount)",
        "print(f\"Minimum coins needed: {result}\")",
        "",
        "# Longest Increasing Subsequence",
        "def longest_increasing_subsequence(arr):",
        "    if not arr:",
        "        return 0",
        "    dp = [1] * len(arr)",
        "    for i in range(1, len(arr)):",
        "        for j in range(i):",
        "            if arr[i] > arr[j]:",
        "                dp[i] = max(dp[i], dp[j] + 1)",
        "    return max(dp)",
        "",
        "# Using LIS",
        "sequence = [10, 9, 2, 5, 3, 7, 101, 18]",
        "result = longest_increasing_subsequence(sequence)",
        "print(f\"Length of longest increasing subsequence: {result}\")"
      ]
    },
    {
      "title": "Recursion Techniques",
      "description": "Practice common recursion patterns used in competitive programming",
      "content": [
        "# Basic recursion - factorial",
        "def factorial(n):",
        "    if n <= 1:",
        "        return 1",
        "    return n * factorial(n - 1)",
        "",
        "# Using factorial",
        "result = factorial(5)",
        "print(f\"Factorial of 5: {result}\")",
        "",
        "# Recursive sum",
        "def recursive_sum(arr):",
        "    if not arr:",
        "        return 0",
        "    return arr[0] + recursive_sum(arr[1:])",
        "",
        "# Using recursive sum",
        "numbers = [1, 2, 3, 4, 5]",
        "total = recursive_sum(numbers)",
        "print(f\"Sum of numbers: {total}\")",
        "",
        "# Binary search using recursion",
        "def binary_search(arr, target, left, right):",
        "    if left > right:",
        "        return -1",
        "    mid = (left + right) // 2",
        "    if arr[mid] == target:",
        "        return mid",
        "    elif arr[mid] > target:",
        "        return binary_search(arr, target, left, mid - 1)",
        "    else:",
        "        return binary_search(arr, target, mid + 1, right)",
        "",
        "# Using binary search",
        "sorted_numbers = [1, 3, 5, 7, 9, 11, 13]",
        "index = binary_search(sorted_numbers, 7, 0, len(sorted_numbers) - 1)",
        "print(f\"Found 7 at index: {index}\")",
        "",
        "# Tower of Hanoi",
        "def tower_of_hanoi(n, source, auxiliary, target):",
        "    if n == 1:",
        "        print(f\"Move disk 1 from {source} to {target}\")",
        "        return",
        "    tower_of_hanoi(n-1, source, target, auxiliary)",
        "    print(f\"Move disk {n} from {source} to {target}\")",
        "    tower_of_hanoi(n-1, auxiliary, source, target)",
        "",
        "# Using Tower of Hanoi",
        "print(\"Tower of Hanoi solution for 3 disks:\")",
        "tower_of_hanoi(3, 'A', 'B', 'C')",
        "",
        "# Recursive palindrome check",
        "def is_palindrome(s):",
        "    if len(s) <= 1:",
        "        return True",
        "    return s[0] == s[-1] and is_palindrome(s[1:-1])",
        "",
        "# Using palindrome check",
        "word = \"racecar\"",
        "print(f\"Is {word} palindrome? {is_palindrome(word)}\")"
      ]
    },
    {
      "title": "Sorting and Searching Algorithms",
      "description": "Implement various sorting and binary search techniques",
      "content": [
        "# Bubble Sort",
        "def bubble_sort(arr):",
        "    n = len(arr)",
        "    for i in range(n):",
        "        for j in range(0, n-i-1):",
        "            if arr[j] > arr[j+1]:",
        "                arr[j], arr[j+1] = arr[j+1], arr[j]",
        "",
        "# Quick Sort",
        "def quick_sort(arr):",
        "    if len(arr) <= 1:",
        "        return arr",
        "    pivot = arr[len(arr)//2]",
        "    left = [x for x in arr if x < pivot]",
        "    middle = [x for x in arr if x == pivot]",
        "    right = [x for x in arr if x > pivot]",
        "    return quick_sort(left) + middle + quick_sort(right)",
        "",
        "# Merge Sort",
        "def merge_sort(arr):",
        "    if len(arr) <= 1:",
        "        return arr",
        "    mid = len(arr)//2",
        "    left = merge_sort(arr[:mid])",
        "    right = merge_sort(arr[mid:])",
        "    return merge(left, right)",
        "",
        "def merge(left, right):",
        "    result = []",
        "    i = j = 0",
        "    while i < len(left) and j < len(right):",
        "        if left[i] <= right[j]:",
        "            result.append(left[i])",
        "            i += 1",
        "        else:",
        "            result.append(right[j])",
        "            j += 1",
        "    result.extend(left[i:])",
        "    result.extend(right[j:])",
        "    return result",
        "",
        "# Binary Search",
        "def binary_search(arr, target):",
        "    left, right = 0, len(arr) - 1",
        "    while left <= right:",
        "        mid = (left + right) // 2",
        "        if arr[mid] == target:",
        "            return mid",
        "        elif arr[mid] < target:",
        "            left = mid + 1",
        "        else:",
        "            right = mid - 1",
        "    return -1",
        "",
        "# Using sorting algorithms",
        "numbers = [64, 34, 25, 12, 22, 11, 90]",
        "bubble_sorted = numbers.copy()",
        "bubble_sort(bubble_sorted)",
        "print(f\"Bubble sorted: {bubble_sorted}\")",
        "",
        "quick_sorted = quick_sort(numbers)",
        "print(f\"Quick sorted: {quick_sorted}\")",
        "",
        "merge_sorted = merge_sort(numbers)",
        "print(f\"Merge sorted: {merge_sorted}\")",
        "",
        "# Using binary search",
        "sorted_array = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "target = 6",
        "result = binary_search(sorted_array, target)",
        "print(f\"Found {target} at index: {result}\")"
      ]
    },
    {
      "title": "String Manipulation",
      "description": "Practice efficient string operations and algorithms",
      "content": [
        "# String basics",
        "text = \"Hello, World!\"",
        "name = 'Python'",
        "",
        "# String operations",
        "print(text.upper())",
        "print(text.lower())",
        "print(text.replace('Hello', 'Hi'))",
        "",
        "# String concatenation",
        "greeting = \"Hello\" + \" \" + \"Python\"",
        "formatted = f\"Welcome to {name}!\"",
        "",
        "# String slicing",
        "print(text[0:5])  # First 5 characters",
        "print(text[-6:])  # Last 6 characters",
        "print(text[::2])  # Every second character",
        "",
        "# String methods",
        "words = \"python programming language\"",
        "print(words.title())",
        "print(words.split())",
        "print(\"-\".join(['a', 'b', 'c']))",
        "",
        "# String checking",
        "print(text.startswith('Hello'))",
        "print(text.endswith('!'))",
        "print('World' in text)",
        "",
        "# String stripping",
        "spaces = \"   text with spaces   \"",
        "print(spaces.strip())",
        "print(spaces.lstrip())",
        "print(spaces.rstrip())",
        "",
        "# String finding",
        "position = text.find('World')",
        "count = text.count('l')",
        "print(f\"'World' found at: {position}\")",
        "print(f\"Count of 'l': {count}\")",
        "",
        "# String alignment",
        "text = \"Python\"",
        "print(text.center(20, '*'))",
        "print(text.ljust(10, '-'))",
        "print(text.rjust(10, '-'))",
        "",
        "# String validation",
        "num = \"12345\"",
        "alpha = \"Hello\"",
        "print(f\"Is numeric: {num.isnumeric()}\")",
        "print(f\"Is alpha: {alpha.isalpha()}\")"
      ]
    }
  ]
}