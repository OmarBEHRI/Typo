{
  "name": "Python",
  "description": "A high-level, interpreted programming language that is easy to learn and understand, and is used for a wide range of applications such as web development, scientific computing, data analysis, artificial intelligence, and more.",
  "lessons": [
    {
      "title": "Classes and Objects Basics",
      "description": "Learn the fundamentals of Python classes and objects",
      "content": [
        "# Class definition",
        "class Person:",
        "    def __init__(self, name, age):",
        "        self.name = name",
        "        self.age = age",
        "",
        "    def greet(self):",
        "        return f\"Hello, my name is {self.name}\"",
        "",
        "# Creating objects",
        "person1 = Person(\"Alice\", 25)",
        "person2 = Person(\"Bob\", 30)",
        "",
        "# Accessing attributes",
        "print(person1.name)",
        "print(person2.age)",
        "",
        "# Calling methods",
        "print(person1.greet())"
      ]
    },
    {
      "title": "Class Inheritance",
      "description": "Learn about inheritance in Python classes",
      "content": [
        "# Base class",
        "class Person:",
        "    def __init__(self, name, age):",
        "        self.name = name",
        "        self.age = age",
        "",
        "    def greet(self):",
        "        return f\"Hello, my name is {self.name}\"",
        "",
        "# Inheritance",
        "class Student(Person):",
        "    def __init__(self, name, age, student_id):",
        "        super().__init__(name, age)",
        "        self.student_id = student_id",
        "",
        "    def study(self):",
        "        return f\"{self.name} is studying\"",
        "",
        "# Creating student object",
        "student1 = Student(\"Charlie\", 20, \"S12345\")",
        "print(student1.greet())",
        "print(student1.study())"
      ]
    },
    {
      "title": "Class Variables",
      "description": "Learn about class-level variables in Python",
      "content": [
        "# Class variables",
        "class Counter:",
        "    count = 0  # Class variable",
        "",
        "    def __init__(self):",
        "        Counter.count += 1",
        "",
        "# Creating multiple counters",
        "c1 = Counter()",
        "c2 = Counter()",
        "print(f\"Total counters: {Counter.count}\")"
      ]
    },
    {
      "title": "Basic Exception Handling",
      "description": "Learn basic try-except blocks in Python",
      "content": [
        "# Basic try-except",
        "try:",
        "    number = int(\"abc\")",
        "except ValueError:",
        "    print(\"Invalid number conversion\")",
        "",
        "# Multiple except blocks",
        "try:",
        "    result = 10 / 0",
        "    numbers = [1, 2, 3]",
        "    value = numbers[10]",
        "except ZeroDivisionError:",
        "    print(\"Cannot divide by zero\")",
        "except IndexError:",
        "    print(\"Index out of range\")"
      ]
    },
    {
      "title": "Advanced Exception Handling",
      "description": "Learn about else, finally, and custom exceptions",
      "content": [
        "# Try-except-else-finally",
        "try:",
        "    number = int(\"42\")",
        "except ValueError:",
        "    print(\"Conversion failed\")",
        "else:",
        "    print(f\"Conversion successful: {number}\")",
        "finally:",
        "    print(\"Execution completed\")",
        "",
        "# Custom exceptions",
        "class CustomError(Exception):",
        "    pass",
        "",
        "try:",
        "    raise CustomError(\"This is a custom error\")",
        "except CustomError as e:",
        "    print(f\"Caught error: {e}\")"
      ]
    },
    {
      "title": "Basic File Operations",
      "description": "Learn to write and read files in Python",
      "content": [
        "# Writing to a file",
        "with open('example.txt', 'w') as file:",
        "    file.write('Hello, World!')",
        "    file.write('\\nThis is a new line')",
        "",
        "# Reading from a file",
        "with open('example.txt', 'r') as file:",
        "    content = file.read()",
        "print(f\"File contents: {content}\")",
        "",
        "# Reading lines from a file",
        "with open('example.txt', 'r') as file:",
        "    lines = file.readlines()",
        "print(f\"Lines: {lines}\")"
      ]
    },
    {
      "title": "Advanced File Operations",
      "description": "Learn about file appending and line-by-line reading",
      "content": [
        "# Appending to a file",
        "with open('example.txt', 'a') as file:",
        "    file.write('\\nAppended text')",
        "",
        "# Reading file line by line",
        "with open('example.txt', 'r') as file:",
        "    for line in file:",
        "        print(f\"Line: {line.strip()}\")",
        "",
        "# Checking if file exists",
        "import os",
        "file_exists = os.path.exists('example.txt')",
        "print(f\"File exists: {file_exists}\")"
      ]
    },
    {
      "title": "Advanced Data Structures - Heaps, Part 1",
      "description": "Learn about heapify and heappop",
      "content": [
        "# Importing heapq module",
        "import heapq",
        "",
        "# Creating a min heap",
        "numbers = [3, 1, 4, 1, 5, 9, 2, 6]",
        "heapq.heapify(numbers)",
        "print(f\"Min heap: {numbers}\")",
        "",
        "# Push and pop operations",
        "heapq.heappush(numbers, 0)",
        "smallest = heapq.heappop(numbers)",
        "print(f\"Smallest element: {smallest}\")"
      ]
    },
    {
      "title": "Advanced Data Structures - Heaps, Part 2",
      "description": "Learn about heappushpop and nsmallest",
      "content": [
        "# Push and pop in one operation",
        "next_smallest = heapq.heappushpop(numbers, 7)",
        "print(f\"Next smallest: {next_smallest}\")",
        "",
        "# Get n smallest elements",
        "smallest_three = heapq.nsmallest(3, numbers)",
        "print(f\"Three smallest: {smallest_three}\")"
      ]
    },
    {
      "title": "Advanced Data Structures - Heaps, Part 3",
      "description": "Learn about max heap creation and use",
      "content": [
        "# Creating a max heap (using negatives)",
        "max_heap = [-n for n in [3, 1, 4, 1, 5, 9, 2, 6]]",
        "heapq.heapify(max_heap)",
        "",
        "# Get largest element",
        "largest = -heapq.heappop(max_heap)",
        "print(f\"Largest element: {largest}\")"
      ]
    },
    {
      "title": "Advanced Data Structures - Deques - Creating and Adding Elements",
      "description": "Learn the basics of creating and adding elements to a deque",
      "content": [
        "# Importing deque",
        "from collections import deque",
        "",
        "# Creating a deque",
        "d = deque([1, 2, 3, 4, 5])",
        "print(f\"Initial deque: {d}\")",
        "",
        "# Adding elements",
        "d.append(6)  # Add to right end",
        "d.appendleft(0)  # Add to left end",
        "print(f\"After adding elements: {d}\")"
      ]
    },
    {
      "title": "Advanced Data Structures - Deques - Removing Elements",
      "description": "Learn how to remove elements from a deque",
      "content": [
        "# Removing elements",
        "right = d.pop()  # Remove from right end",
        "left = d.popleft()  # Remove from left end",
        "print(f\"Removed right: {right}, left: {left}\")",
        "print(f\"After removing: {d}\")"
      ]
    },
    {
      "title": "Advanced Data Structures - Deques - Rotating",
      "description": "Learn how to rotate a deque",
      "content": [
        "# Rotating the deque",
        "d.rotate(1)  # Rotate right by 1",
        "print(f\"After rotating right: {d}\")",
        "d.rotate(-2)  # Rotate left by 2",
        "print(f\"After rotating left: {d}\")"
      ]
    },
    {
      "title": "Advanced Data Structures - Deques - Extending",
      "description": "Learn how to extend a deque",
      "content": [
        "# Other operations",
        "d.extend([7, 8])  # Extend at right",
        "d.extendleft([9, 10])  # Extend at left",
        "print(f\"After extending: {d}\")"
      ]
    },
    {
      "title": "Advanced Data Structures - Deques - Clearing",
      "description": "Learn how to clear a deque",
      "content": [
        "# Clear the deque",
        "d.clear()",
        "print(f\"After clearing: {d}\")"
      ]
    },
    {
      "title": "Graph Representations - Adjacency List",
      "description": "Learn to create an adjacency list for graph problems",
      "content": [
        "# Adjacency List representation",
        "",
        "# Print adjacency list",
        "for vertex in graph:",
        "    print(f\"Vertex {vertex} connected to: {graph[vertex]}\")"
      ]
    },
    {
      "title": "Graph Representations - Adjacency Matrix",
      "description": "Learn to create an adjacency matrix for graph problems",
      "content": [
        "# Adjacency Matrix representation",
        "",
        "# Print adjacency matrix",
        "print(\"Adjacency Matrix:\")",
        "for row in matrix:",
        "    print(row)"
      ]
    },
    {
      "title": "Graph Representations - Checking Connectivity",
      "description": "Learn to check if vertices are connected in a graph",
      "content": [
        "# Check if vertices are connected",
        "def is_connected(matrix, v1, v2):",
        "    return matrix[v1][v2] == 1"
      ]
    },
    {
      "title": "Graph Representations - Adding Edges",
      "description": "Learn to add an edge to an adjacency list",
      "content": [
        "# Add edge to adjacency list",
        "def add_edge(graph, v1, v2):",
        "    if v2 not in graph[v1]:",
        "    graph[v1].append(v2)",
        "    graph[v2].append(v1)"
      ]
    },
    {
      "title": "Graph Representations - Getting Neighbors",
      "description": "Learn to get neighbors from an adjacency list",
      "content": [
        "# Get neighbors from adjacency list",
        "def get_neighbors(graph, vertex):",
        "    return graph[vertex]"
      ]
    },
    {
      "title": "Dynamic Programming Basics - Memoization",
      "description": "Learn to implement memoization for simple dynamic programming problems",
      "content": [
        "# Fibonacci with memoization",
        "def fib_memo(n, memo={}):",
        "    if n in memo:",
        "        return memo[n]",
        "    if n <= 1:",
        "        return n",
        "    memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo)",
        "    return memo[n]",
        "",
        "# Using memoized fibonacci",
        "result = fib_memo(10)",
        "print(f\"10th Fibonacci number: {result}\")"
      ]
    },
    {
      "title": "Dynamic Programming Basics - Tabulation",
      "description": "Learn to implement tabulation for simple dynamic programming problems",
      "content": [
        "# Fibonacci with tabulation",
        "def fib_tab(n):",
        "    if n <= 1:",
        "        return n",
        "    dp = [0] * (n + 1)",
        "    dp[1] = 1",
        "    for i in range(2, n + 1):",
        "        dp[i] = dp[i-1] + dp[i-2]",
        "    return dp[n]",
        "",
        "# Using tabulation fibonacci",
        "result = fib_tab(10)",
        "print(f\"10th Fibonacci number: {result}\")"
      ]
    },
    {
      "title": "Dynamic Programming Basics - Coin Change",
      "description": "Learn to implement dynamic programming for the coin change problem",
      "content": [
        "# Coin change problem",
        "def coin_change(coins, amount):",
        "    dp = [float('inf')] * (amount + 1)",
        "    dp[0] = 0",
        "    for i in range(1, amount + 1):",
        "        for coin in coins:",
        "            if coin <= i:",
        "                dp[i] = min(dp[i], dp[i-coin] + 1)",
        "    return dp[amount] if dp[amount] != float('inf') else -1",
        "",
        "# Using coin change",
        "coins = [1, 2, 5]",
        "amount = 11",
        "result = coin_change(coins, amount)",
        "print(f\"Minimum coins needed: {result}\")"
      ]
    },
    {
      "title": "Dynamic Programming Basics - Longest Increasing Subsequence",
      "description": "Learn to implement dynamic programming for the longest increasing subsequence problem",
      "content": [
        "# Longest Increasing Subsequence",
        "def longest_increasing_subsequence(arr):",
        "    if not arr:",
        "        return 0",
        "    dp = [1] * len(arr)",
        "    for i in range(1, len(arr)):",
        "        for j in range(i):",
        "            if arr[i] > arr[j]:",
        "                dp[i] = max(dp[i], dp[j] + 1)",
        "    return max(dp)",
        "",
        "# Using LIS",
        "sequence = [10, 9, 2, 5, 3, 7, 101, 18]",
        "result = longest_increasing_subsequence(sequence)",
        "print(f\"Length of longest increasing subsequence: {result}\")"
      ]
    },
    {
      "title": "Basic Recursion - Factorial",
      "description": "Practice basic recursion using factorial example",
      "content": [
        "# Basic recursion - factorial",
        "def factorial(n):",
        "    if n <= 1:",
        "        return 1",
        "    return n * factorial(n - 1)",
        "",
        "# Using factorial",
        "result = factorial(5)",
        "print(f\"Factorial of 5: {result}\")"
      ]
    },
    {
      "title": "Recursive Sum",
      "description": "Practice recursive sum",
      "content": [
        "# Recursive sum",
        "def recursive_sum(arr):",
        "    if not arr:",
        "        return 0",
        "    return arr[0] + recursive_sum(arr[1:])",
        "",
        "# Using recursive sum",
        "numbers = [1, 2, 3, 4, 5]",
        "total = recursive_sum(numbers)",
        "print(f\"Sum of numbers: {total}\")"
      ]
    },
    {
      "title": "Binary Search Using Recursion",
      "description": "Practice binary search using recursion",
      "content": [
        "# Binary search using recursion",
        "def binary_search(arr, target, left, right):",
        "    if left > right:",
        "        return -1",
        "    mid = (left + right) // 2",
        "    if arr[mid] == target:",
        "        return mid",
        "    elif arr[mid] > target:",
        "        return binary_search(arr, target, left, mid - 1)",
        "    else:",
        "        return binary_search(arr, target, mid + 1, right)",
        "",
        "# Using binary search",
        "sorted_numbers = [1, 3, 5, 7, 9, 11, 13]",
        "index = binary_search(sorted_numbers, 7, 0, len(sorted_numbers) - 1)",
        "print(f\"Found 7 at index: {index}\")"
      ]
    },
    {
      "title": "Tower of Hanoi",
      "description": "Practice Tower of Hanoi",
      "content": [
        "# Tower of Hanoi",
        "def tower_of_hanoi(n, source, auxiliary, target):",
        "    if n == 1:",
        "        print(f\"Move disk 1 from {source} to {target}\")",
        "        return",
        "    tower_of_hanoi(n-1, source, target, auxiliary)",
        "    print(f\"Move disk {n} from {source} to {target}\")",
        "    tower_of_hanoi(n-1, auxiliary, source, target)",
        "",
        "# Using Tower of Hanoi",
        "print(\"Tower of Hanoi solution for 3 disks:\")",
        "tower_of_hanoi(3, 'A', 'B', 'C')"
      ]
    },
    {
      "title": "Recursive Palindrome Check",
      "description": "Practice recursive palindrome check",
      "content": [
        "# Recursive palindrome check",
        "def is_palindrome(s):",
        "    if len(s) <= 1:",
        "        return True",
        "    return s[0] == s[-1] and is_palindrome(s[1:-1])",
        "",
        "# Using palindrome check",
        "word = \"racecar\"",
        "print(f\"Is {word} palindrome? {is_palindrome(word)}\")"
      ]
    },
    {
      "title": "String Basics",
      "description": "Learn string basics and indexing",
      "content": [
        "# String basics",
        "text = \"Hello, World!\"",
        "name = 'Python'",
        "",
        "# String operations",
        "print(text.upper())",
        "print(text.lower())",
        "print(text.replace('Hello', 'Hi'))"
      ]
    },
    {
      "title": "String Concatenation",
      "description": "Learn string concatenation",
      "content": [
        "# String concatenation",
        "greeting = \"Hello\" + \" \" + \"Python\"",
        "formatted = f\"Welcome to {name}!\""
      ]
    },
    {
      "title": "String Slicing",
      "description": "Learn string slicing",
      "content": [
        "# String slicing",
        "print(text[0:5])  # First 5 characters",
        "print(text[-6:])  # Last 6 characters",
        "print(text[::2])  # Every second character"
      ]
    },
    {
      "title": "String Methods",
      "description": "Learn string methods",
      "content": [
        "# String methods",
        "words = \"python programming language\"",
        "print(words.title())",
        "print(words.split())",
        "print(\"-\".join(['a', 'b', 'c']))"
      ]
    },
    {
      "title": "String Checking",
      "description": "Learn string checking",
      "content": [
        "# String checking",
        "print(text.startswith('Hello'))",
        "print(text.endswith('!'))",
        "print('World' in text)"
      ]
    },
    {
      "title": "String Stripping",
      "description": "Learn string stripping",
      "content": [
        "# String stripping",
        "spaces = \"   text with spaces   \"",
        "print(spaces.strip())",
        "print(spaces.lstrip())",
        "print(spaces.rstrip())"
      ]
    },
    {
      "title": "String Finding",
      "description": "Learn string finding",
      "content": [
        "# String finding",
        "position = text.find('World')",
        "count = text.count('l')",
        "print(f\"'World' found at: {position}\")",
        "print(f\"Count of 'l': {count}\")"
      ]
    },
    {
      "title": "String Alignment",
      "description": "Learn string alignment",
      "content": [
        "# String alignment",
        "text = \"Python\"",
        "print(text.center(20, '*'))",
        "print(text.ljust(10, '-'))",
        "print(text.rjust(10, '-'))"
      ]
    },
    {
      "title": "String Validation",
      "description": "Learn string validation",
      "content": [
        "# String validation",
        "num = \"12345\"",
        "alpha = \"Hello\"",
        "print(f\"Is numeric: {num.isnumeric()}\")",
        "print(f\"Is alpha: {alpha.isalpha()}\")"
      ]
    }
  ]
}